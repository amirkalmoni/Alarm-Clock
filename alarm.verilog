`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// Create Date: 11/29/2019 11:20:40 PM
// Design Name: 
// Module Name: alarmClock
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module alarmClock(
    input clkin, reset,  changeTime, changeAlarm, hoursBTN, minutesBTN, alarmEnable,
    output PM, alarmTurnedOn,
    output [5:0] alarmOn,
    output [6:0] seg,
    output [7:0] an
    
    );
    wire clk_5MHz, clk_1Hz, clk_10Hz, clk_5Hz, changeHours, changeMinutes, clockPM, alarmPM, holdTime, incrementMinutes, incrementHours, alarmRinger;
    wire[5:0] clockMinutes, clockHours, alarmMinutes, alarmHours;//12 Hour clock values
    
    assign alarmTurnedOn = alarmEnable;//turning on the LED when the alarm is on
    
    //setting up the FPGA clocks
    clk_wiz_0 clk_wizard(.clk_in1(clkin), .locked(locked), .reset(reset), .clk_5MHz(clk_5MHz));// clock wizard
    //100 Hz Clock
    clk_div clk_div100Hz(.reset(reset), .clk_ini(clk_5MHz), .clk_div(clk_100Hz));//gets the 100 Hz clock using the clock divider
    defparam clk_div100Hz.CLK_DIVIDER = 25000;//250000
    //1kHz Clock
    clk_div clk_div1kHz(.reset(reset), .clk_ini(clk_5MHz), .clk_div(clk_1kHz));//gets the 1 kHz clock
    defparam clk_div1kHz.CLK_DIVIDER = 2500;
    //1 Hz Clock
    clk_div clk_div1Hz(.reset(reset), .clk_ini(clk_5MHz), .clk_div(clk_1Hz));//gets the 1 Hz clock using the clock divider
    defparam clk_div1Hz.CLK_DIVIDER = 2500000;//
    //1/2Hz Clock
    clk_div clk_div5Hz(.reset(reset), .clk_ini(clk_5MHz), .clk_div(clk_5Hz));//
    defparam clk_div5Hz.CLK_DIVIDER = 500000;//
    
    
    //debouncing the button inputs
    debouncer debouncer_BTNU(.button(minutesBTN), .reset(reset), .clk_100Hz(clk_100Hz), .debouncedButton(changeMinutes));//for minutes
    debouncer debouncer_BTND(.button(hoursBTN), .reset(reset), .clk_100Hz(clk_100Hz), .debouncedButton(changeHours));//for hours

    //implementing the 12-Hour clock
    timeClock clockTime(.clk_1Hz(clk_1Hz), .reset(reset),.incrementHours(changeHours && changeTime),//gets the inputs from the debounced buttons
    .incrementMinutes(changeMinutes && changeTime), .minutes(clockMinutes), .hours(clockHours), .PM(clockPM));   
    
    //implementing the alarm
    alarm alarm(.changeHours(changeHours && changeAlarm), .changeMinutes(changeMinutes && changeAlarm), .reset(reset), .alarmEnable(alarmEnable), .clockHours(clockHours),
    .clockMinutes(clockMinutes), .clockPM(clockPM), .minutes(alarmMinutes), .hours(alarmHours), .PM(alarmPM), .alarmOn(alarmOn), .clk_100Hz(clk_100Hz), .clk_5Hz(clk_5Hz));
 
    
    //implementing the display controller
    displayController display(.clk_1kHz(clk_1kHz), .changeAlarm(changeAlarm), .alarmMinutes(alarmMinutes), .alarmHours(alarmHours), .clockMinutes(clockMinutes),
    .clockHours(clockHours), .seg(seg), .an(an), .alarmPM(alarmPM), .clockPM(clockPM), .PM(PM), .reset(reset));

endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 11/29/2019 11:27:45 PM
// Design Name: 
// Module Name: clk_div1Hz
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module clk_div(//modular clock divider to reduce clock frequency
    input clk_ini,//input clk that is running at 2 hz
    input reset,
    output reg clk_div = 0,//resulting clock after the division
    output reg [64:0] count = 0//for testbench purposes      
    
    );
    parameter CLK_DIVIDER = 0;
    
    always@(posedge clk_ini or posedge reset)begin
        if(reset)begin
            count <=  0;
            clk_div <= 0;
        end else begin
            if(count == CLK_DIVIDER - 1)begin
                clk_div <= ~clk_div;
                count <= 0;
            end else begin
                count <= count + 1;            
            end
        end     
    
    end
   
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/01/2019 02:33:12 PM
// Design Name: 
// Module Name: displayController
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module displayController(
    input clk_1kHz, reset,
    input changeAlarm,//tells us when to switch to the alarm time
    input [5:0] alarmMinutes, alarmHours, clockHours, clockMinutes,
    input clockPM, alarmPM,
    output [6:0] seg,
    output reg PM,
    output reg [7:0] an,
    output reg [3:0] numberUsed,//for test bench purposes
    output reg [2:0] count = 0//for test bench purposes
    );
    parameter displayElements = 7;//number of elements on the display
    
    // decoder used to generate the required seg and an outputs
    BCDTo7SegmentDecoder decoder(.number(numberUsed), .seg(seg));
    
    always@(posedge clk_1kHz)begin
        if(reset)begin//displays 
            numberUsed <= 4'b1100;//values used for ----
            an <= 8'b11110000;
        end else if(!changeAlarm)begin//when the clock should be displayed
            PM <= clockPM;
            if(count == 0)begin//less significant minutes
                numberUsed <= clockMinutes%10;
                an <= 8'b11111110;
             end else if(count == 1)begin //more significant minutes
                numberUsed <= clockMinutes / 10;//truncation should take care of the lower digits
                an <= 8'b11111101;
             end else if(count == 2)begin//less significant hours
                numberUsed <= clockHours%10;
                an <= 8'b11111011;
             end else if(count == 3)begin//more significant hours
                if(clockHours >= 10)begin numberUsed <= 1; end else numberUsed = 0;
                an <= 8'b11110111;
             end else if(count == 4)begin//for C
                numberUsed <= 4'b1101;
                an <= 8'b01111111;
             end else if(count == 5)begin// for L
                numberUsed <= 4'b1110;
                an <= 8'b10111111;      
             end else if(count == 6)begin
                if(PM)begin
                    numberUsed <= 4'b1011;//P
                end else begin
                    numberUsed <= 4'b1111;
                end
                an <= 8'b11101111;                                
             end else begin
                an <= 8'b11111111;
             end
        
        //When the alarm values should be showing    
        end else if(changeAlarm)begin
            PM <= alarmPM;
            if(count == 0)begin//less significant minutes
                numberUsed <= alarmMinutes%10;
                an <= 8'b11111110;
             end else if(count == 1)begin //more significant minutes
                numberUsed <= alarmMinutes / 10;//truncation should take care of the lower digits
                an <= 8'b11111101;
             end else if(count == 2)begin//less significant hours
                numberUsed <= alarmHours%10;
                an <= 8'b11111011;
             end else if(count == 3)begin//more significant hours
                numberUsed <= alarmHours/10;
                an <= 8'b11110111;
             end else if(count  == 4)begin//displays A   
                numberUsed <= 4'b1111;
                an <= 8'b01111111;
             end else if(count == 5)begin// displays L
                numberUsed <= 4'b1110;
                an <= 8'b10111111;
             end else if(count == 6)begin
                if(PM)begin                
                    numberUsed <= 4'b1011;
                end else begin
                    numberUsed <= 4'b1111;
                end
                an <= 8'b11101111;                 
             end else begin//turns off the display when invalid count
                an <= 8'b11111111;
             end             
        end
      
        //Incrementing and resetting the count value
        if(count < displayElements - 1)begin
            count <= count +1; //increment the value of count
        end else begin
            count <= 0;
        end            
    end
    
    
    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 11/30/2019 02:07:21 PM
// Design Name: 
// Module Name: debouncer
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module debouncer(//Checking to see if the signal remains constant for 5/10Hz
    input button,
    input reset,
    input clk_100Hz,
    output reg debouncedButton = 0,
    output reg [3:0] count  = 0//testing purposes
    );
    always@(posedge clk_100Hz or posedge reset)begin
        if(reset)begin
        count <= 0;
        end else begin
            if(button)begin
                count <= count + 1;
                
            end else begin
                count <= 0;
            end
            if(count >= 4)begin
                debouncedButton <= 1;
                
            end else begin
                debouncedButton <= 0;
            end
            
        end   
    end
    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 11/30/2019 04:04:06 PM
// Design Name: 
// Module Name: alarm
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module alarm(
    input changeMinutes, changeHours, clk_100Hz, clk_5Hz,//debounced button inputs
    input reset, alarmEnable,
    input [5:0] clockHours, clockMinutes,//values from the timeClock
    input clockPM, //PM of the clockTime module
    output  [5:0] minutes, hours,//needed in order to display on the FPGA
    output reg [5:0] alarmOn,//leds that appear when the alarm time has been reached and the alarm is enabled
    output PM
    );
    reg ringAlarm;
    reg [3:0] countAlarmOn;
    //Re-use modules for counting the time and hours
    minutesCounter minCounter(.incrementMinutes(changeMinutes), .reset(reset), .minutes(minutes));//carryOverMinutes ignored due to no carry in this module
    hoursCounter hourCounter(.incrementHours(changeHours), .reset(reset), .hours(hours), .PM(PM));
    
    always@(posedge clk_5Hz)begin//outputs the ringAlarm on the LED in 1/2 second intervals
        if(ringAlarm)begin
            if(countAlarmOn < 6)begin
                countAlarmOn <= countAlarmOn + 1;
                alarmOn[countAlarmOn] <= 1;
            end else begin
                countAlarmOn <= 0;
                alarmOn <= 0;
            end 
        end else begin
            countAlarmOn <= 0;
            alarmOn <= 0;
        end
    end 
    
    always@(posedge clk_100Hz or posedge reset)begin
        if(reset)begin
            ringAlarm <= 0;
        end else if(minutes == clockMinutes && hours == clockHours && PM == clockPM && alarmEnable)begin
            ringAlarm <= 1;
        end else begin
            ringAlarm <= 0;
        end
    end
      
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 11/29/2019 11:52:18 PM
// Design Name: 
// Module Name: minutes
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module timeClock(//handles the time measurement for the alarm clock
    input clk_1Hz,//input clk from the clock divider
    input reset,
    input incrementHours,//when the BTNU (Hours) and BTNL (changeTime) are pressed -> connected to debouncing
    input incrementMinutes,//when the BTND (Minutes) and BTNL (changeTime) are pressed -> connected to debouncing
    output [5:0] minutes, //need at least 6 bits (0->63) to cover the value of 60
    output [5:0] hours,
    output [5:0] seconds,//testing purposes
    output PM//if "1" then it is PM, if "0" then it is AM
    );
    wire carrySeconds, carryMinutes;//interconnection wires

    
    secondsCounter secondsCounter1(.clk_1Hz(clk_1Hz), .carryOver(carrySeconds), .seconds(seconds), .reset(reset));
    minutesCounter minutesCounter1(.incrementMinutes(carrySeconds || incrementMinutes), .ifIncremented(incrementMinutes), .reset(reset),.carryOverMinutes(carryMinutes), .minutes(minutes));
    hoursCounter hoursCounter1( .incrementHours(incrementHours || carryMinutes),  .reset(reset), .hours(hours), .PM(PM) );
    

    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/03/2019 02:07:13 PM
// Design Name: 
// Module Name: minutesCounter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module minutesCounter(
    input incrementMinutes,reset,ifIncremented,   
    output reg carryOverMinutes,
    output reg [5:0] minutes = 0
    );
    
    always@(posedge incrementMinutes or posedge reset)begin
        if(reset)begin//resets the values
            minutes  <= 0;
            carryOverMinutes <= 0;
        end else begin 
          if(minutes < 59)begin
              minutes <= minutes + 1;
              carryOverMinutes <= 0;
          end else if (minutes == 59)begin
              minutes <= 0 ;
              if(!ifIncremented)begin
                carryOverMinutes <= 1;
              end
          end
       end
    end
    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/03/2019 02:07:29 PM
// Design Name: 
// Module Name: hoursCounter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module hoursCounter(
    input incrementHours,
    input reset, 
    output reg [5:0] hours = 12,
    output reg PM = 0// "1" indicates PM
    );
    
    always@(posedge incrementHours or  posedge reset)begin//when the carryOver occurs or the changeHours BTN is pressed
        if(reset)begin
            hours <= 12;//resets to the value of 12:00 am
            PM <= 0;
        end else begin
             if(incrementHours)begin
                if(hours <= 11)begin// for any values below 11
                     if(hours == 11)begin
                         PM <= ~PM;
                     end
                     hours <= hours + 1;
                end else begin
                     hours <= 1;
                 end
             end
                           
        end
    end
    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/03/2019 02:08:47 PM
// Design Name: 
// Module Name: secondsCounter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module secondsCounter(
    input clk_1Hz,
    input reset,
    output reg carryOver = 0,
    output reg [5:0] seconds = 0// for testing purposes
    );
    
    always@(posedge clk_1Hz or posedge reset)begin
        if(reset)begin
            seconds <= 0;
        end else begin
            if(seconds < 59)begin
                seconds <= seconds + 1;
                carryOver <= 0;
            end else if (seconds == 59)begin
                carryOver <= 1;
                seconds <= 0;
            end
        end
    
    end
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/01/2019 01:38:44 PM
// Design Name: 
// Module Name: BCDTo7SegmentDecoder
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module BCDTo7SegmentDecoder(//this module is used to convert BCD to 7 segments to be used in the display
    input [3:0] number,//number to be converted
    output reg [6:0] seg
    );    
    
    always@(number)begin
        case(number)
            0: seg = 7'b1000000;
            1: seg = 7'b1111001;
            2: seg = 7'b0100100;
            3: seg = 7'b0110000;
            4: seg = 7'b0011001;
            5: seg = 7'b0010010;
            6: seg = 7'b0000010;
            7: seg = 7'b1111000;
            8: seg = 7'b0000000;
            9: seg = 7'b0010000;
            4'b1111: seg = 7'b0001000;//value for A
            4'b1110: seg = 7'b1000111; //value for L
            4'b1101: seg = 7'b1000110;//value for C
            4'b1100: seg = 7'b0111111;// value for -
            4'b1011: seg = 7'b0001100;// value fo P
            default: seg = 7'b1000000;
        endcase
     end
     
    
endmodule


## This file is a general .xdc for the Nexys4 DDR Rev. C
## To use it in a project:
## - uncomment the lines corresponding to used pins
## - rename the used ports (in each line, after get_ports) according to the top level signal names in the project

## Clock signal
set_property -dict { PACKAGE_PIN E3    IOSTANDARD LVCMOS33 } [get_ports { clkin }]; #IO_L12P_T1_MRCC_35 Sch=clk100mhz
#create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports {CLK100MHZ}];


##Switches

set_property -dict { PACKAGE_PIN J15   IOSTANDARD LVCMOS33 } [get_ports { alarmEnable }]; #IO_L24N_T3_RS0_15 Sch=sw[0]
#set_property -dict { PACKAGE_PIN L16   IOSTANDARD LVCMOS33 } [get_ports {  }]; #IO_L3N_T0_DQS_EMCCLK_14 Sch=sw[1]
#set_property -dict { PACKAGE_PIN M13   IOSTANDARD LVCMOS33 } [get_ports { minutesBTN }]; #IO_L6N_T0_D08_VREF_14 Sch=sw[2]
#set_property -dict { PACKAGE_PIN R15   IOSTANDARD LVCMOS33 } [get_ports { hoursBTN }]; #IO_L13N_T2_MRCC_14 Sch=sw[3]
#set_property -dict { PACKAGE_PIN R17   IOSTANDARD LVCMOS33 } [get_ports { changeTime }]; #IO_L12N_T1_MRCC_14 Sch=sw[4]
#set_property -dict { PACKAGE_PIN T18   IOSTANDARD LVCMOS33 } [get_ports { changeAlarm }]; #IO_L7N_T1_D10_14 Sch=sw[5]
#set_property -dict { PACKAGE_PIN U18   IOSTANDARD LVCMOS33 } [get_ports { SW[6] }]; #IO_L17N_T2_A13_D29_14 Sch=sw[6]
#set_property -dict { PACKAGE_PIN R13   IOSTANDARD LVCMOS33 } [get_ports { SW[7] }]; #IO_L5N_T0_D07_14 Sch=sw[7]
#set_property -dict { PACKAGE_PIN T8    IOSTANDARD LVCMOS18 } [get_ports { SW[8] }]; #IO_L24N_T3_34 Sch=sw[8]
#set_property -dict { PACKAGE_PIN U8    IOSTANDARD LVCMOS18 } [get_ports { SW[9] }]; #IO_25_34 Sch=sw[9]
#set_property -dict { PACKAGE_PIN R16   IOSTANDARD LVCMOS33 } [get_ports { SW[10] }]; #IO_L15P_T2_DQS_RDWR_B_14 Sch=sw[10]
#set_property -dict { PACKAGE_PIN T13   IOSTANDARD LVCMOS33 } [get_ports { SW[11] }]; #IO_L23P_T3_A03_D19_14 Sch=sw[11]
#set_property -dict { PACKAGE_PIN H6    IOSTANDARD LVCMOS33 } [get_ports { SW[12] }]; #IO_L24P_T3_35 Sch=sw[12]
#set_property -dict { PACKAGE_PIN U12   IOSTANDARD LVCMOS33 } [get_ports { SW[13] }]; #IO_L20P_T3_A08_D24_14 Sch=sw[13]
#set_property -dict { PACKAGE_PIN U11   IOSTANDARD LVCMOS33 } [get_ports { SW[14] }]; #IO_L19N_T3_A09_D25_VREF_14 Sch=sw[14]
set_property -dict { PACKAGE_PIN V10   IOSTANDARD LVCMOS33 } [get_ports { reset }]; #IO_L21P_T3_DQS_14 Sch=sw[15]


## LEDs

set_property -dict { PACKAGE_PIN H17   IOSTANDARD LVCMOS33 } [get_ports { alarmTurnedOn}]; #IO_L18P_T2_A24_15 Sch=led[0]
#set_property -dict { PACKAGE_PIN K15   IOSTANDARD LVCMOS33 } [get_ports {  }]; #IO_L24P_T3_RS1_15 Sch=led[1]
#set_property -dict { PACKAGE_PIN J13   IOSTANDARD LVCMOS33 } [get_ports { LED[2] }]; #IO_L17N_T2_A25_15 Sch=led[2]
#set_property -dict { PACKAGE_PIN N14   IOSTANDARD LVCMOS33 } [get_ports { LED[3] }]; #IO_L8P_T1_D11_14 Sch=led[3]
#set_property -dict { PACKAGE_PIN R18   IOSTANDARD LVCMOS33 } [get_ports { LED[4] }]; #IO_L7P_T1_D09_14 Sch=led[4]
set_property -dict { PACKAGE_PIN V17   IOSTANDARD LVCMOS33 } [get_ports { alarmOn[0] }]; #IO_L18N_T2_A11_D27_14 Sch=led[5]
set_property -dict { PACKAGE_PIN U17   IOSTANDARD LVCMOS33 } [get_ports { alarmOn[1] }]; #IO_L17P_T2_A14_D30_14 Sch=led[6]
set_property -dict { PACKAGE_PIN U16   IOSTANDARD LVCMOS33 } [get_ports { alarmOn[2] }]; #IO_L18P_T2_A12_D28_14 Sch=led[7]
set_property -dict { PACKAGE_PIN V16   IOSTANDARD LVCMOS33 } [get_ports { alarmOn[3] }]; #IO_L16N_T2_A15_D31_14 Sch=led[8]
set_property -dict { PACKAGE_PIN T15   IOSTANDARD LVCMOS33 } [get_ports { alarmOn[4] }]; #IO_L14N_T2_SRCC_14 Sch=led[9]
set_property -dict { PACKAGE_PIN U14   IOSTANDARD LVCMOS33 } [get_ports { alarmOn[5] }]; #IO_L22P_T3_A05_D21_14 Sch=led[10]
#set_property -dict { PACKAGE_PIN T16   IOSTANDARD LVCMOS33 } [get_ports { LED[11] }]; #IO_L15N_T2_DQS_DOUT_CSO_B_14 Sch=led[11]
#set_property -dict { PACKAGE_PIN V15   IOSTANDARD LVCMOS33 } [get_ports { LED[12] }]; #IO_L16P_T2_CSI_B_14 Sch=led[12]
#set_property -dict { PACKAGE_PIN V14   IOSTANDARD LVCMOS33 } [get_ports { LED[13] }]; #IO_L22N_T3_A04_D20_14 Sch=led[13]
#set_property -dict { PACKAGE_PIN V12   IOSTANDARD LVCMOS33 } [get_ports { LED[14] }]; #IO_L20N_T3_A07_D23_14 Sch=led[14]
set_property -dict { PACKAGE_PIN V11   IOSTANDARD LVCMOS33 } [get_ports { PM }]; #IO_L21N_T3_DQS_A06_D22_14 Sch=led[15]

#set_property -dict { PACKAGE_PIN R12   IOSTANDARD LVCMOS33 } [get_ports { LED16_B }]; #IO_L5P_T0_D06_14 Sch=led16_b
#set_property -dict { PACKAGE_PIN M16   IOSTANDARD LVCMOS33 } [get_ports { LED16_G }]; #IO_L10P_T1_D14_14 Sch=led16_g
#set_property -dict { PACKAGE_PIN N15   IOSTANDARD LVCMOS33 } [get_ports { LED16_R }]; #IO_L11P_T1_SRCC_14 Sch=led16_r
#set_property -dict { PACKAGE_PIN G14   IOSTANDARD LVCMOS33 } [get_ports { LED17_B }]; #IO_L15N_T2_DQS_ADV_B_15 Sch=led17_b
#set_property -dict { PACKAGE_PIN R11   IOSTANDARD LVCMOS33 } [get_ports { LED17_G }]; #IO_0_14 Sch=led17_g
#set_property -dict { PACKAGE_PIN N16   IOSTANDARD LVCMOS33 } [get_ports { LED17_R }]; #IO_L11N_T1_SRCC_14 Sch=led17_r


##7 segment display

set_property -dict { PACKAGE_PIN T10   IOSTANDARD LVCMOS33 } [get_ports { seg[0] }]; #IO_L24N_T3_A00_D16_14 Sch=ca
set_property -dict { PACKAGE_PIN R10   IOSTANDARD LVCMOS33 } [get_ports { seg[1] }]; #IO_25_14 Sch=cb
set_property -dict { PACKAGE_PIN K16   IOSTANDARD LVCMOS33 } [get_ports { seg[2] }]; #IO_25_15 Sch=cc
set_property -dict { PACKAGE_PIN K13   IOSTANDARD LVCMOS33 } [get_ports { seg[3] }]; #IO_L17P_T2_A26_15 Sch=cd
set_property -dict { PACKAGE_PIN P15   IOSTANDARD LVCMOS33 } [get_ports { seg[4] }]; #IO_L13P_T2_MRCC_14 Sch=ce
set_property -dict { PACKAGE_PIN T11   IOSTANDARD LVCMOS33 } [get_ports { seg[5] }]; #IO_L19P_T3_A10_D26_14 Sch=cf
set_property -dict { PACKAGE_PIN L18   IOSTANDARD LVCMOS33 } [get_ports { seg[6] }]; #IO_L4P_T0_D04_14 Sch=cg

#set_property -dict { PACKAGE_PIN H15   IOSTANDARD LVCMOS33 } [get_ports { DP }]; #IO_L19N_T3_A21_VREF_15 Sch=dp

set_property -dict { PACKAGE_PIN J17   IOSTANDARD LVCMOS33 } [get_ports { an[0] }]; #IO_L23P_T3_FOE_B_15 Sch=an[0]
set_property -dict { PACKAGE_PIN J18   IOSTANDARD LVCMOS33 } [get_ports { an[1] }]; #IO_L23N_T3_FWE_B_15 Sch=an[1]
set_property -dict { PACKAGE_PIN T9    IOSTANDARD LVCMOS33 } [get_ports { an[2] }]; #IO_L24P_T3_A01_D17_14 Sch=an[2]
set_property -dict { PACKAGE_PIN J14   IOSTANDARD LVCMOS33 } [get_ports { an[3] }]; #IO_L19P_T3_A22_15 Sch=an[3]
set_property -dict { PACKAGE_PIN P14   IOSTANDARD LVCMOS33 } [get_ports { an[4] }]; #IO_L8N_T1_D12_14 Sch=an[4]
set_property -dict { PACKAGE_PIN T14   IOSTANDARD LVCMOS33 } [get_ports { an[5] }]; #IO_L14P_T2_SRCC_14 Sch=an[5]
set_property -dict { PACKAGE_PIN K2    IOSTANDARD LVCMOS33 } [get_ports { an[6] }]; #IO_L23P_T3_35 Sch=an[6]
set_property -dict { PACKAGE_PIN U13   IOSTANDARD LVCMOS33 } [get_ports { an[7] }]; #IO_L23N_T3_A02_D18_14 Sch=an[7]


##Buttons

#set_property -dict { PACKAGE_PIN C12   IOSTANDARD LVCMOS33 } [get_ports { CPU_RESETN }]; #IO_L3P_T0_DQS_AD1P_15 Sch=cpu_resetn

#set_property -dict { PACKAGE_PIN N17   IOSTANDARD LVCMOS33 } [get_ports { BTNC }]; #IO_L9P_T1_DQS_14 Sch=btnc
set_property -dict { PACKAGE_PIN M18   IOSTANDARD LVCMOS33 } [get_ports { hoursBTN }]; #IO_L4N_T0_D05_14 Sch=btnu
set_property -dict { PACKAGE_PIN P17   IOSTANDARD LVCMOS33 } [get_ports { changeTime }]; #IO_L12P_T1_MRCC_14 Sch=btnl
set_property -dict { PACKAGE_PIN M17   IOSTANDARD LVCMOS33 } [get_ports { changeAlarm }]; #IO_L10N_T1_D15_14 Sch=btnr
set_property -dict { PACKAGE_PIN P18   IOSTANDARD LVCMOS33 } [get_ports { minutesBTN }]; #IO_L9N_T1_DQS_D13_14 Sch=btnd


##Pmod Headers


##Pmod Header JA

#set_property -dict { PACKAGE_PIN C17   IOSTANDARD LVCMOS33 } [get_ports { JA[1] }]; #IO_L20N_T3_A19_15 Sch=ja[1]
#set_property -dict { PACKAGE_PIN D18   IOSTANDARD LVCMOS33 } [get_ports { JA[2] }]; #IO_L21N_T3_DQS_A18_15 Sch=ja[2]
#set_property -dict { PACKAGE_PIN E18   IOSTANDARD LVCMOS33 } [get_ports { JA[3] }]; #IO_L21P_T3_DQS_15 Sch=ja[3]
#set_property -dict { PACKAGE_PIN G17   IOSTANDARD LVCMOS33 } [get_ports { JA[4] }]; #IO_L18N_T2_A23_15 Sch=ja[4]
#set_property -dict { PACKAGE_PIN D17   IOSTANDARD LVCMOS33 } [get_ports { JA[7] }]; #IO_L16N_T2_A27_15 Sch=ja[7]
#set_property -dict { PACKAGE_PIN E17   IOSTANDARD LVCMOS33 } [get_ports { JA[8] }]; #IO_L16P_T2_A28_15 Sch=ja[8]
#set_property -dict { PACKAGE_PIN F18   IOSTANDARD LVCMOS33 } [get_ports { JA[9] }]; #IO_L22N_T3_A16_15 Sch=ja[9]
#set_property -dict { PACKAGE_PIN G18   IOSTANDARD LVCMOS33 } [get_ports { JA[10] }]; #IO_L22P_T3_A17_15 Sch=ja[10]


##Pmod Header JB

#set_property -dict { PACKAGE_PIN D14   IOSTANDARD LVCMOS33 } [get_ports { JB[1] }]; #IO_L1P_T0_AD0P_15 Sch=jb[1]
#set_property -dict { PACKAGE_PIN F16   IOSTANDARD LVCMOS33 } [get_ports { JB[2] }]; #IO_L14N_T2_SRCC_15 Sch=jb[2]
#set_property -dict { PACKAGE_PIN G16   IOSTANDARD LVCMOS33 } [get_ports { JB[3] }]; #IO_L13N_T2_MRCC_15 Sch=jb[3]
#set_property -dict { PACKAGE_PIN H14   IOSTANDARD LVCMOS33 } [get_ports { JB[4] }]; #IO_L15P_T2_DQS_15 Sch=jb[4]
#set_property -dict { PACKAGE_PIN E16   IOSTANDARD LVCMOS33 } [get_ports { JB[7] }]; #IO_L11N_T1_SRCC_15 Sch=jb[7]
#set_property -dict { PACKAGE_PIN F13   IOSTANDARD LVCMOS33 } [get_ports { JB[8] }]; #IO_L5P_T0_AD9P_15 Sch=jb[8]
#set_property -dict { PACKAGE_PIN G13   IOSTANDARD LVCMOS33 } [get_ports { JB[9] }]; #IO_0_15 Sch=jb[9]
#set_property -dict { PACKAGE_PIN H16   IOSTANDARD LVCMOS33 } [get_ports { JB[10] }]; #IO_L13P_T2_MRCC_15 Sch=jb[10]


##Pmod Header JC

#set_property -dict { PACKAGE_PIN K1    IOSTANDARD LVCMOS33 } [get_ports { JC[1] }]; #IO_L23N_T3_35 Sch=jc[1]
#set_property -dict { PACKAGE_PIN F6    IOSTANDARD LVCMOS33 } [get_ports { JC[2] }]; #IO_L19N_T3_VREF_35 Sch=jc[2]
#set_property -dict { PACKAGE_PIN J2    IOSTANDARD LVCMOS33 } [get_ports { JC[3] }]; #IO_L22N_T3_35 Sch=jc[3]
#set_property -dict { PACKAGE_PIN G6    IOSTANDARD LVCMOS33 } [get_ports { JC[4] }]; #IO_L19P_T3_35 Sch=jc[4]
#set_property -dict { PACKAGE_PIN E7    IOSTANDARD LVCMOS33 } [get_ports { JC[7] }]; #IO_L6P_T0_35 Sch=jc[7]
#set_property -dict { PACKAGE_PIN J3    IOSTANDARD LVCMOS33 } [get_ports { JC[8] }]; #IO_L22P_T3_35 Sch=jc[8]
#set_property -dict { PACKAGE_PIN J4    IOSTANDARD LVCMOS33 } [get_ports { JC[9] }]; #IO_L21P_T3_DQS_35 Sch=jc[9]
#set_property -dict { PACKAGE_PIN E6    IOSTANDARD LVCMOS33 } [get_ports { JC[10] }]; #IO_L5P_T0_AD13P_35 Sch=jc[10]


##Pmod Header JD

#set_property -dict { PACKAGE_PIN H4    IOSTANDARD LVCMOS33 } [get_ports { JD[1] }]; #IO_L21N_T3_DQS_35 Sch=jd[1]
#set_property -dict { PACKAGE_PIN H1    IOSTANDARD LVCMOS33 } [get_ports { JD[2] }]; #IO_L17P_T2_35 Sch=jd[2]
#set_property -dict { PACKAGE_PIN G1    IOSTANDARD LVCMOS33 } [get_ports { JD[3] }]; #IO_L17N_T2_35 Sch=jd[3]
#set_property -dict { PACKAGE_PIN G3    IOSTANDARD LVCMOS33 } [get_ports { JD[4] }]; #IO_L20N_T3_35 Sch=jd[4]
#set_property -dict { PACKAGE_PIN H2    IOSTANDARD LVCMOS33 } [get_ports { JD[7] }]; #IO_L15P_T2_DQS_35 Sch=jd[7]
#set_property -dict { PACKAGE_PIN G4    IOSTANDARD LVCMOS33 } [get_ports { JD[8] }]; #IO_L20P_T3_35 Sch=jd[8]
#set_property -dict { PACKAGE_PIN G2    IOSTANDARD LVCMOS33 } [get_ports { JD[9] }]; #IO_L15N_T2_DQS_35 Sch=jd[9]
#set_property -dict { PACKAGE_PIN F3    IOSTANDARD LVCMOS33 } [get_ports { JD[10] }]; #IO_L13N_T2_MRCC_35 Sch=jd[10]


##Pmod Header JXADC

#set_property -dict { PACKAGE_PIN A14   IOSTANDARD LVDS     } [get_ports { XA_N[1] }]; #IO_L9N_T1_DQS_AD3N_15 Sch=xa_n[1]
#set_property -dict { PACKAGE_PIN A13   IOSTANDARD LVDS     } [get_ports { XA_P[1] }]; #IO_L9P_T1_DQS_AD3P_15 Sch=xa_p[1]
#set_property -dict { PACKAGE_PIN A16   IOSTANDARD LVDS     } [get_ports { XA_N[2] }]; #IO_L8N_T1_AD10N_15 Sch=xa_n[2]
#set_property -dict { PACKAGE_PIN A15   IOSTANDARD LVDS     } [get_ports { XA_P[2] }]; #IO_L8P_T1_AD10P_15 Sch=xa_p[2]
#set_property -dict { PACKAGE_PIN B17   IOSTANDARD LVDS     } [get_ports { XA_N[3] }]; #IO_L7N_T1_AD2N_15 Sch=xa_n[3]
#set_property -dict { PACKAGE_PIN B16   IOSTANDARD LVDS     } [get_ports { XA_P[3] }]; #IO_L7P_T1_AD2P_15 Sch=xa_p[3]
#set_property -dict { PACKAGE_PIN A18   IOSTANDARD LVDS     } [get_ports { XA_N[4] }]; #IO_L10N_T1_AD11N_15 Sch=xa_n[4]
#set_property -dict { PACKAGE_PIN B18   IOSTANDARD LVDS     } [get_ports { XA_P[4] }]; #IO_L10P_T1_AD11P_15 Sch=xa_p[4]


##VGA Connector

#set_property -dict { PACKAGE_PIN A3    IOSTANDARD LVCMOS33 } [get_ports { VGA_R[0] }]; #IO_L8N_T1_AD14N_35 Sch=vga_r[0]
#set_property -dict { PACKAGE_PIN B4    IOSTANDARD LVCMOS33 } [get_ports { VGA_R[1] }]; #IO_L7N_T1_AD6N_35 Sch=vga_r[1]
#set_property -dict { PACKAGE_PIN C5    IOSTANDARD LVCMOS33 } [get_ports { VGA_R[2] }]; #IO_L1N_T0_AD4N_35 Sch=vga_r[2]
#set_property -dict { PACKAGE_PIN A4    IOSTANDARD LVCMOS33 } [get_ports { VGA_R[3] }]; #IO_L8P_T1_AD14P_35 Sch=vga_r[3]

#set_property -dict { PACKAGE_PIN C6    IOSTANDARD LVCMOS33 } [get_ports { VGA_G[0] }]; #IO_L1P_T0_AD4P_35 Sch=vga_g[0]
#set_property -dict { PACKAGE_PIN A5    IOSTANDARD LVCMOS33 } [get_ports { VGA_G[1] }]; #IO_L3N_T0_DQS_AD5N_35 Sch=vga_g[1]
#set_property -dict { PACKAGE_PIN B6    IOSTANDARD LVCMOS33 } [get_ports { VGA_G[2] }]; #IO_L2N_T0_AD12N_35 Sch=vga_g[2]
#set_property -dict { PACKAGE_PIN A6    IOSTANDARD LVCMOS33 } [get_ports { VGA_G[3] }]; #IO_L3P_T0_DQS_AD5P_35 Sch=vga_g[3]

#set_property -dict { PACKAGE_PIN B7    IOSTANDARD LVCMOS33 } [get_ports { VGA_B[0] }]; #IO_L2P_T0_AD12P_35 Sch=vga_b[0]
#set_property -dict { PACKAGE_PIN C7    IOSTANDARD LVCMOS33 } [get_ports { VGA_B[1] }]; #IO_L4N_T0_35 Sch=vga_b[1]
#set_property -dict { PACKAGE_PIN D7    IOSTANDARD LVCMOS33 } [get_ports { VGA_B[2] }]; #IO_L6N_T0_VREF_35 Sch=vga_b[2]
#set_property -dict { PACKAGE_PIN D8    IOSTANDARD LVCMOS33 } [get_ports { VGA_B[3] }]; #IO_L4P_T0_35 Sch=vga_b[3]

#set_property -dict { PACKAGE_PIN B11   IOSTANDARD LVCMOS33 } [get_ports { VGA_HS }]; #IO_L4P_T0_15 Sch=vga_hs
#set_property -dict { PACKAGE_PIN B12   IOSTANDARD LVCMOS33 } [get_ports { VGA_VS }]; #IO_L3N_T0_DQS_AD1N_15 Sch=vga_vs


##Micro SD Connector

#set_property -dict { PACKAGE_PIN E2    IOSTANDARD LVCMOS33 } [get_ports { SD_RESET }]; #IO_L14P_T2_SRCC_35 Sch=sd_reset
#set_property -dict { PACKAGE_PIN A1    IOSTANDARD LVCMOS33 } [get_ports { SD_CD }]; #IO_L9N_T1_DQS_AD7N_35 Sch=sd_cd
#set_property -dict { PACKAGE_PIN B1    IOSTANDARD LVCMOS33 } [get_ports { SD_SCK }]; #IO_L9P_T1_DQS_AD7P_35 Sch=sd_sck
#set_property -dict { PACKAGE_PIN C1    IOSTANDARD LVCMOS33 } [get_ports { SD_CMD }]; #IO_L16N_T2_35 Sch=sd_cmd
#set_property -dict { PACKAGE_PIN C2    IOSTANDARD LVCMOS33 } [get_ports { SD_DAT[0] }]; #IO_L16P_T2_35 Sch=sd_dat[0]
#set_property -dict { PACKAGE_PIN E1    IOSTANDARD LVCMOS33 } [get_ports { SD_DAT[1] }]; #IO_L18N_T2_35 Sch=sd_dat[1]
#set_property -dict { PACKAGE_PIN F1    IOSTANDARD LVCMOS33 } [get_ports { SD_DAT[2] }]; #IO_L18P_T2_35 Sch=sd_dat[2]
#set_property -dict { PACKAGE_PIN D2    IOSTANDARD LVCMOS33 } [get_ports { SD_DAT[3] }]; #IO_L14N_T2_SRCC_35 Sch=sd_dat[3]


##Accelerometer

#set_property -dict { PACKAGE_PIN E15   IOSTANDARD LVCMOS33 } [get_ports { ACL_MISO }]; #IO_L11P_T1_SRCC_15 Sch=acl_miso
#set_property -dict { PACKAGE_PIN F14   IOSTANDARD LVCMOS33 } [get_ports { ACL_MOSI }]; #IO_L5N_T0_AD9N_15 Sch=acl_mosi
#set_property -dict { PACKAGE_PIN F15   IOSTANDARD LVCMOS33 } [get_ports { ACL_SCLK }]; #IO_L14P_T2_SRCC_15 Sch=acl_sclk
#set_property -dict { PACKAGE_PIN D15   IOSTANDARD LVCMOS33 } [get_ports { ACL_CSN }]; #IO_L12P_T1_MRCC_15 Sch=acl_csn
#set_property -dict { PACKAGE_PIN B13   IOSTANDARD LVCMOS33 } [get_ports { ACL_INT[1] }]; #IO_L2P_T0_AD8P_15 Sch=acl_int[1]
#set_property -dict { PACKAGE_PIN C16   IOSTANDARD LVCMOS33 } [get_ports { ACL_INT[2] }]; #IO_L20P_T3_A20_15 Sch=acl_int[2]


##Temperature Sensor

#set_property -dict { PACKAGE_PIN C14   IOSTANDARD LVCMOS33 } [get_ports { TMP_SCL }]; #IO_L1N_T0_AD0N_15 Sch=tmp_scl
#set_property -dict { PACKAGE_PIN C15   IOSTANDARD LVCMOS33 } [get_ports { TMP_SDA }]; #IO_L12N_T1_MRCC_15 Sch=tmp_sda
#set_property -dict { PACKAGE_PIN D13   IOSTANDARD LVCMOS33 } [get_ports { TMP_INT }]; #IO_L6N_T0_VREF_15 Sch=tmp_int
#set_property -dict { PACKAGE_PIN B14   IOSTANDARD LVCMOS33 } [get_ports { TMP_CT }]; #IO_L2N_T0_AD8N_15 Sch=tmp_ct

##Omnidirectional Microphone

#set_property -dict { PACKAGE_PIN J5    IOSTANDARD LVCMOS33 } [get_ports { M_CLK }]; #IO_25_35 Sch=m_clk
#set_property -dict { PACKAGE_PIN H5    IOSTANDARD LVCMOS33 } [get_ports { M_DATA }]; #IO_L24N_T3_35 Sch=m_data
#set_property -dict { PACKAGE_PIN F5    IOSTANDARD LVCMOS33 } [get_ports { M_LRSEL }]; #IO_0_35 Sch=m_lrsel


##PWM Audio Amplifier

#set_property -dict { PACKAGE_PIN A11   IOSTANDARD LVCMOS33 } [get_ports { AUD_PWM }]; #IO_L4N_T0_15 Sch=aud_pwm
#set_property -dict { PACKAGE_PIN D12   IOSTANDARD LVCMOS33 } [get_ports { AUD_SD }]; #IO_L6P_T0_15 Sch=aud_sd


##USB-RS232 Interface

#set_property -dict { PACKAGE_PIN C4    IOSTANDARD LVCMOS33 } [get_ports { UART_TXD_IN }]; #IO_L7P_T1_AD6P_35 Sch=uart_txd_in
#set_property -dict { PACKAGE_PIN D4    IOSTANDARD LVCMOS33 } [get_ports { UART_RXD_OUT }]; #IO_L11N_T1_SRCC_35 Sch=uart_rxd_out
#set_property -dict { PACKAGE_PIN D3    IOSTANDARD LVCMOS33 } [get_ports { UART_CTS }]; #IO_L12N_T1_MRCC_35 Sch=uart_cts
#set_property -dict { PACKAGE_PIN E5    IOSTANDARD LVCMOS33 } [get_ports { UART_RTS }]; #IO_L5N_T0_AD13N_35 Sch=uart_rts

##USB HID (PS/2)

#set_property -dict { PACKAGE_PIN F4    IOSTANDARD LVCMOS33 } [get_ports { PS2_CLK }]; #IO_L13P_T2_MRCC_35 Sch=ps2_clk
#set_property -dict { PACKAGE_PIN B2    IOSTANDARD LVCMOS33 } [get_ports { PS2_DATA }]; #IO_L10N_T1_AD15N_35 Sch=ps2_data


##SMSC Ethernet PHY

#set_property -dict { PACKAGE_PIN C9    IOSTANDARD LVCMOS33 } [get_ports { ETH_MDC }]; #IO_L11P_T1_SRCC_16 Sch=eth_mdc
#set_property -dict { PACKAGE_PIN A9    IOSTANDARD LVCMOS33 } [get_ports { ETH_MDIO }]; #IO_L14N_T2_SRCC_16 Sch=eth_mdio
#set_property -dict { PACKAGE_PIN B3    IOSTANDARD LVCMOS33 } [get_ports { ETH_RSTN }]; #IO_L10P_T1_AD15P_35 Sch=eth_rstn
#set_property -dict { PACKAGE_PIN D9    IOSTANDARD LVCMOS33 } [get_ports { ETH_CRSDV }]; #IO_L6N_T0_VREF_16 Sch=eth_crsdv
#set_property -dict { PACKAGE_PIN C10   IOSTANDARD LVCMOS33 } [get_ports { ETH_RXERR }]; #IO_L13N_T2_MRCC_16 Sch=eth_rxerr
#set_property -dict { PACKAGE_PIN C11   IOSTANDARD LVCMOS33 } [get_ports { ETH_RXD[0] }]; #IO_L13P_T2_MRCC_16 Sch=eth_rxd[0]
#set_property -dict { PACKAGE_PIN D10   IOSTANDARD LVCMOS33 } [get_ports { ETH_RXD[1] }]; #IO_L19N_T3_VREF_16 Sch=eth_rxd[1]
#set_property -dict { PACKAGE_PIN B9    IOSTANDARD LVCMOS33 } [get_ports { ETH_TXEN }]; #IO_L11N_T1_SRCC_16 Sch=eth_txen
#set_property -dict { PACKAGE_PIN A10   IOSTANDARD LVCMOS33 } [get_ports { ETH_TXD[0] }]; #IO_L14P_T2_SRCC_16 Sch=eth_txd[0]
#set_property -dict { PACKAGE_PIN A8    IOSTANDARD LVCMOS33 } [get_ports { ETH_TXD[1] }]; #IO_L12N_T1_MRCC_16 Sch=eth_txd[1]
#set_property -dict { PACKAGE_PIN D5    IOSTANDARD LVCMOS33 } [get_ports { ETH_REFCLK }]; #IO_L11P_T1_SRCC_35 Sch=eth_refclk
#set_property -dict { PACKAGE_PIN B8    IOSTANDARD LVCMOS33 } [get_ports { ETH_INTN }]; #IO_L12P_T1_MRCC_16 Sch=eth_intn


##Quad SPI Flash

#set_property -dict { PACKAGE_PIN K17   IOSTANDARD LVCMOS33 } [get_ports { QSPI_DQ[0] }]; #IO_L1P_T0_D00_MOSI_14 Sch=qspi_dq[0]
#set_property -dict { PACKAGE_PIN K18   IOSTANDARD LVCMOS33 } [get_ports { QSPI_DQ[1] }]; #IO_L1N_T0_D01_DIN_14 Sch=qspi_dq[1]
#set_property -dict { PACKAGE_PIN L14   IOSTANDARD LVCMOS33 } [get_ports { QSPI_DQ[2] }]; #IO_L2P_T0_D02_14 Sch=qspi_dq[2]
#set_property -dict { PACKAGE_PIN M14   IOSTANDARD LVCMOS33 } [get_ports { QSPI_DQ[3] }]; #IO_L2N_T0_D03_14 Sch=qspi_dq[3]
#set_property -dict { PACKAGE_PIN L13   IOSTANDARD LVCMOS33 } [get_ports { QSPI_CSN }]; #IO_L6P_T0_FCS_B_14 Sch=qspi_csn



`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 11/30/2019 04:34:03 PM
// Design Name: 
// Module Name: alarm_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module alarm_tb(

    );
//       input changeMinutes, changeHours, clk_100Hz, clk_2Hz,//debounced button inputs
//     input reset, alarmEnable,
//     input [5:0] clockHours, clockMinutes,//values from the timeClock
//     input clockPM, //PM of the clockTime module
//     output  [5:0] minutes, hours,//needed in order to display on the FPGA
//     output reg alarmOn,
//     output PM

    reg changeMinutes, changeHours, clk_100Hz, clk_2Hz, reset, alarmEnable, clockPM, changeAlarm;
    reg [5:0] clockHours, clockMinutes;
    wire [5:0] hours, minutes;
    wire alarmOn, PM;
    
    alarm alarm1(.changeMinutes(changeMinutes && changeAlarm), .changeHours(changeHours && changeAlarm), .clk_100Hz(clk_100Hz), .clk_2Hz(clk_2Hz), .reset(reset), .alarmEnable(alarmEnable),
    .clockHours(clockHours), .clockMinutes(clockMinutes), .hours(hours), .minutes(minutes), .PM(PM), .alarmOn(alarmOn));
    
    always#0.5 clk_2Hz = ~clk_2Hz;
    always#0.001 clk_100Hz = ~clk_100Hz;
    always#1 changeHours = ~changeHours;
    initial begin
        clk_100Hz = 0;
        clk_2Hz = 0;
        reset = 1;
        changeHours = 0;
        #1;
        reset = 0;
        clockHours = 12;
        clockMinutes = 0;
        
        changeMinutes = 1;
        changeAlarm = 1;
    
        #500 $finish;
    end
        
        
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/01/2019 03:42:21 PM
// Design Name: 
// Module Name: displayController_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module displayController_tb(

    );
   /*
       input clk_1kHz,
       input changeAlarm,//tells us when to switch to the alarm time
       input [5:0] alarmMinutes, alarmHours, clockHours, clockMinutes,
       output [6:0] seg,
       output reg [7:0] an,
       output reg count = 0//for test bench purposes 
    */
    wire [6:0] seg;
    wire [7:0] an;
    wire [2:0] count;
    wire [3:0] numberUsed;
    reg clk, changeAlarm;
    reg [5:0] clockHours, clockMinutes;
    
      displayController display(.clk_1kHz(clk), .changeAlarm(changeAlarm), .clockMinutes(clockMinutes),
     .clockHours(clockHours), .seg(seg), .an(an), .count(count), .numberUsed(numberUsed));
     
     always#1 clk = ~clk;
     
     initial begin
        clk = 1;
        changeAlarm = 0;
        clockHours = 0;
        clockMinutes = 0;
        
        
        #100 $finish;
     end
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 11/30/2019 02:20:15 PM
// Design Name: 
// Module Name: debouncer_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module debouncer_tb(

    );
    /*
        input button,
        input reset,
        input clk_10Hz,
        output reg debouncedButton = 0
    */
    wire debouncedButton;
    wire [3:0] count;
    reg button, reset, clk;
    
    debouncer DUT(.button(button), .reset(reset), .clk_100Hz(clk), .debouncedButton(debouncedButton),.count(count));
    
    always#1 clk = ~clk;
    initial begin
        clk = 0;
        reset = 0;
        button = 1;
        #5;
        button = 0;
        #10;
        button = 1;
        #15;
        button = 0;
        #2;
        button = 1;
        #10;
        button = 0;
    
        #100 $finish;
    end
    
    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/02/2019 02:49:28 PM
// Design Name: 
// Module Name: timeClock_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module timeClock_tb(

    );
////     input clk_1Hz,
//    input clk_10Hz,
//    input reset,
//    input changeTime, changeMinutes, changeHours,
//    output reg [5:0] minutes, //need at least 6 bits (0->63) to cover the value of 60
//    output reg [5:0] seconds = 0,// only for testing, remove afterwards
//    output reg [5:0] hours,
//    output reg isPM,//if "1" then it is PM, if "0" then it is AM
//    output holdTime, incrementMinutes, incrementHours//for testing purposes    
    reg clk_1Hz, reset, changeTime, incrementHours, incrementMinutes;
    wire [5:0] minutes, seconds, hours;
    wire PM;
    
    timeClock clockTime(.clk_1Hz(clk_1Hz), .reset(reset), .incrementHours(changeTime && incrementHours), .incrementMinutes(changeTime && incrementMinutes),
     .minutes(minutes), .hours(hours), .PM(PM), .seconds(seconds));
    
    always#1 clk_1Hz = ~clk_1Hz;

    initial begin
        incrementHours = 0;
        incrementMinutes =0;
        changeTime = 0;
        clk_1Hz = 0;
        reset = 1;
        #1;
        reset = 0;       
        changeTime = 1;
        incrementHours = 1;
        #6;
        changeTime = 0;
        incrementHours = 0;
        #10;
        changeTime = 1;
        incrementMinutes = 1;
        #20; 
        changeTime = 0;
        
        
        #100000 $finish;
    end
    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/03/2019 04:20:44 PM
// Design Name: 
// Module Name: minuteCounter_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module minuteCounter_tb(

    );
//    input carryOverSeconds,
//        input changeTime,incrementMinutes, reset,
//        output reg carryOverMinutes = 0,
//        output reg [5:0] minutes
    reg    carryOverSeconds, changeTime, incrementMinutes, reset;
    wire carryOverMinutes;
    wire [5:0]  minutes;
    
    minutesCounter min(.carryOverSeconds(carryOverSeconds), .changeTime(changeTime), .incrementMinutes(incrementMinutes) ,.reset(reset),
    .carryOverMinutes(carryOverMinutes), .minutes(minutes));
    
    initial begin
        incrementMinutes = 0;
        reset = 0;
        carryOverSeconds = 0;
        changeTime = 0;
        
        #1 ;
        carryOverSeconds = 1;
        #2; 
        carryOverSeconds = 0;
        #5;
        changeTime = 1;
        incrementMinutes = 1;       
    
        #100 $finish;
    end
     
    
    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/03/2019 03:56:40 PM
// Design Name: 
// Module Name: secondsCounter_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module secondsCounter_tb(
    
    );
//        input clk_1Hz,
//    input reset,
//    output reg carryOver = 0,
//    output reg [5:0] seconds = 0// for testing purposes
    reg clk_1Hz, reset;
    wire carryOver;
    wire [5:0] seconds;
    
    
    secondsCounter sec(.clk_1Hz(clk_1Hz) , .reset(reset), .carryOver(carryOver), .seconds(seconds));
    
    always#1 clk_1Hz = ~clk_1Hz;
    initial begin
        clk_1Hz = 0;
        reset = 0;
         
        #200 $finish;
    end  
    
    
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/01/2019 04:17:41 PM
// Design Name: 
// Module Name: alarmClock_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module alarmClock_tb(
    
    );
    /*
        input clkin, reset, changeTime, changeAlarm, hoursBTN, minutesBTN, alarmEnable,
        output PM, alarmOn,
        output [6:0] seg,
        output [7:0] an    
    */
    reg clkin, reset, changeTime, changeAlarm, hoursBTN, minutesBTN, alarmEnable;
    wire PM, alarmOn;
    wire [6:0] seg;
    wire [7:0] an;
    
    alarmClock alarmClockDUT(.clkin(clkin), .reset(reset), .changeTime(changeTime), .changeAlarm(changeAlarm), .hoursBTN(hoursBTN), .minutesBTN(minutesBTN),
     .alarmEnable(alarmEnable),.PM(PM), .alarmOn(alarmOn), .seg(seg), .an(an));
    
    always#0.01 clkin = ~clkin;
    
    initial begin
        clkin = 0;
        reset = 1;
        changeTime = 0;
        changeAlarm = 0;
        hoursBTN = 0;
        minutesBTN = 0;
        alarmEnable = 0;
        #1; 
        reset = 0;
        changeTime = 1;
        hoursBTN = 1;
        
        
        
        #1000000 $finish;
    end
    
    
    
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Amir Kalmoni 199087101
//           Jonathan Plangger 101070423
// 
// Create Date: 12/02/2019 11:03:36 AM
// Design Name: 
// Module Name: clk_div_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module clk_div_tb(

    );
//     input clk_ini,
//       input reset,
//       output reg clk_div = 0//resulting clock after the division

    reg clk_ini;
    reg reset;
    wire [64:0] count;
    wire clk_div;
    
    clk_div clk_div_DUT(.clk_ini(clk_ini), .reset(reset), .clk_div(clk_div), .count(count));
    defparam clk_div_DUT.CLK_DIVIDER = 10;
    
    
    always#1 clk_ini = ~clk_ini;
    
    initial begin
        clk_ini = 0;
        reset = 1;
        #1; 
        reset = 0;
        #100 $finish;
    end
    
endmodule





